pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

--camx=40 camy=0
camx=160 camy=0

function _init()
 poke(0x5f2d, 1)

	newgen(25,55)
	for x=0,#world-1 do
		for y=1,#world[x+1] do
			--centre
			fillcent(x,y,rnd(1)+#world/2,14+#world[x+1]/2,1+rnd(1))
			fillcent(x,y,#world/2,8+#world[x+1]/2,4+rnd(2))
			fillcent(x,y,rnd(1)+#world/2,-22+#world[x+1]/2,1+rnd(1))
			fillcent(x,y,#world/2,-16+#world[x+1]/2,3.5+rnd(1))
			fillcent(x,y,#world/2,-3+rnd(1)+#world[x+1]/2,10)
		end
	end

	for x=1,#world do
		for y=1,#world[x] do
			local t=world[x][y]
			if t!=nil  then
				cls(0)
			 print("generating world...",32,60,7)
			 if (t.i!=nil) t.seem(t)
  	end
  end
 end
end

function grid()
	--fillp(0b0101010101010101.1)
	for x=1,25 do
		line(40+x*8,127-24+x*4,247+x*8,x*4,11)
		line(40+x*8,127-24-x*4,247+x*8,230-24-x*4,11)
	end
	fillp()
end

function _update()
	if (btn(⬆️)) camy=mid(0,camy-8,96)
	if (btn(⬇️)) camy=mid(0,camy+8,96)
	if (btn(⬅️)) camx=mid(40,camx-16,328)
	if (btn(➡️)) camx=mid(40,camx+16,328)

	px=flr((stat(32)+camx)/16)
	py=flr((stat(33)+camy)/4)
	px=mid(px,1,#world)
	py=mid(py,1,#world[px])

	npc.update(npc)

	if stat(34)==1 and prev!=1 then
		if npc.tn!=nil and npc._t%1>.5 then
			start=npc.tn
		else
			start.x=npc.cn.x
			start.y=npc.cn.y
		end
		goal.x=px
		goal.y=py
		getpath()
	end
	prev=stat(34)
end

prev=0
once=false

function _draw()
	camera(camx,camy)
	cls(12)
	map(0,0,40,-24)
	if (btnp(❎)) big=not big

	for x=1,#world do
		for y=#world[x],1,-1 do
		if world[x][y].i!=nil or world[x][y].s!=nil then
				--drawland(world[x][y])
			end
		end
	end

  --lets march sum fukin squares g
  for x=1,#world do
		for y=#world[x],1,-1 do
		if world[x][y].i!=nil or world[x][y].s!=nil then
        local col=0
        if (world[x][y-1].i!=nil or world[x][y-1].s!=nil) col+=1
        if (world[x+1][y].i!=nil or world[x+1][y].s!=nil) col+=2
        if (world[x][y+1].i!=nil or world[x][y+1].s!=nil) col+=4
        if (world[x-1][y].i!=nil or world[x-1][y].s!=nil) col+=8
        pal(3,col)
    		sspr(8,16,16,8,world[x][y].x,world[x][y].y-1)
			end
		end
	end

	for x=1,#world do
		for y=1,#world[x] do
			if world[x][y].draw!=nil then
				world[x][y].draw(world[x][y])
			end
		end
	end

	pal(12,8)
	if py%2==0 then
		sspr(8,0,15,7,px*16,py*4)
	else
		sspr(8,0,15,7,8+px*16,py*4)
	end
	pal(12,12)

	if npc.path!=nil then
 	  drawpath(npc.path)
	end
	--grid()
	npc.draw(npc)
	chicken()
	pset(stat(32)+camx,stat(33)+camy,7)

  if py%2==1 then
    for y=0,127,7 do
      for x=0,127,16 do
        --rect(camx+x,camy+y,camx+x+16,camy+y+7,1)
      end
    end
  else
    for y=0,127,7 do
      for x=0,127,16 do
        --rect(camx+x+8,camy+y,camx+x+16+8,camy+y+7,1)
      end
    end
  end
	circfill(stat(32)+camx,stat(33)+camy,1,15)

  print("",camx,camy,7)
  ?("px: "..px)
  ?("py: "..py)
  ?""
	?("mEM: "..stat(0))
	?("cPU: "..flr(stat(1)*100).."%")
end

world={}

function newgen(mapx,mapy)
	for x=0,mapx do
		world[x+1]={}
		for y=1,mapy do
			world[x+1][y]={}--{draw=function()end}
			if y%2==0 then
				if x>=abs((mapx-y-1)/2) and
					x<abs(mapx-(abs(mapx-y-1))/2) then
						placewater(x+1,y)
 			end
			end
			if y%2==1 and y*2>mapy/1.15 then
				if x>=abs((mapx-y-2)/2) and
					x<abs(mapx-(abs(mapx-y)/2)) then
					 placewater(x+1,y)
					end
			elseif y%2==1 then
				if x-1>=abs((mapx-y-2)/2) and
					x-1<abs(mapx-(abs(mapx-y)/2)) then
					 placewater(x+1,y)
				end
			end
		end
	end
end

function drawland(p)
	local x=p.x
	local y=p.y+6
  if (x<camx-16 or x>camx+140 or y<camy-16 or y>camy+140) return
  --flip()
  pal(3,rnd(15))
		sspr(8,16,16,8,x,p.y-1)
		--[[if p.seem_l then
			line(x,p.y+3,p.x+7,y,1)
		else
			line(x-1,p.y+3,p.x+6,y,3)
		end
		if p.seem_r then
			line(x+7,y,p.x+14,p.y+3,1)
		else
			line(x+8,y,p.x+14,p.y+3,3)
		end
		if p.seem_m then
			pset(x+7,y,1)
		end]]--
end

function a1(_x,_y,_i)
	local a={
		x=getpxlposx(_x,_y),
		y=_y*4,tx=_x,ty=_y,
		i=_i,
		seem_l=false,seem_r=false,seem_m=false,

	draw=function(p)
		--drawland(p)
	end,
	seem=function(p)
			if p.ty%2==0 then
				if tl(p,0,1).i==nil then
			 	p.seem_l=true
	 		 	placewater(p.tx,p.ty+1)
	 		end
				if tl(p,1,1).i==nil then
			 	p.seem_r=true
	 			placewater(p.tx+1,p.ty+1)
	 		end
				if tl(p,1,1).i!=nil and
					tl(p,0,1).i!=nil and
					tl(p,0,2).i==nil then
						p.seem_m=true
				end
			else
			 if tl(p,0,1).i==nil then
	 			p.seem_r=true
	 			placewater(p.tx,p.ty+1)
  	 end
			 if tl(p,-1,1).i==nil then
			 	p.seem_l=true
	 			placewater(p.tx-1,p.ty+1)
				end
				if tl(p,0,1).i!=nil and
				 tl(p,-1,1).i!=nil and
				 tl(p,0,2).i==nil then
					p.seem_m=true
				end
			end
		end
	}
	return a
end

function fillcent(x,y,cx,cy,_d)
	local dist=((cx-x)^2+(cy-y)^2
		)^0.5
			if dist<_d then
				world[x][y]=a1(x,y,1)
				if dist<_d-2 and rnd(1)>.9 then
					place_tree(x,y)
				elseif dist>_d-3 and rnd(1)>.959 then
					placewater(x,y)
				end
			end
end

function placewater(_tx,_ty)
	local p={
		x=getpxlposx(_tx,_ty),
		y=_ty*4,tx=_tx,ty=_ty,

		update=function(p)
		end,

		draw=function(p)
			sspr(88,40+(2*flr(time()*5%3)),
			15,2,p.x+6,p.y+1)
		end
	}
	world[_tx][_ty]=p
end

big=true
function place_tree(_tx,_ty)
	local tree={
		x=getpxlposx(_tx,_ty),
		y=_ty*4,tx=_tx,ty=_ty,i=flr(rnd(4)),

		seem=function(t)
		end,
		draw=function(t)
			--big trees
			if big then
			 sspr(120,t.i*8,8,8,t.x+4,t.y-2)
			else
 			sspr(flr(time())*8,t.i*8,8,8,t.x+4,t.y-2)
 		end
 	end
	}
	world[_tx][_ty]=tree
end

function find_path(start,goal,
 									edge_cost)
 -- the final step in the
 -- current shortest path
 local shortest,
 -- maps each node to the step
 -- on the best known path to
 -- that node
 best_table = {
  last = start,
  cost_from_start = 0,
  cost_to_goal = mnhttn_dst(start, goal)
 }, {}

 best_table[node_to_id(start)] = shortest

 -- array of frontier paths each
 -- represented by their last
 -- step, used as a priority
 -- queue. elements past
 -- frontier_len are ignored
 local frontier={shortest}
	local frontier_len=1
	local goal_id=node_to_id(goal)
	local max_number=32767.99
 -- while there are frontier paths
 while frontier_len > 0 do
  -- find and extract the shortest path
  local cost, index_of_min = max_number
  for i = 1, frontier_len do
   local temp = frontier[i].cost_from_start + frontier[i].cost_to_goal
   if (temp <= cost) index_of_min,cost = i,temp
  end
  -- efficiently remove the path
  -- with min_index from the
  -- frontier path set
  shortest = frontier[index_of_min]
  frontier[index_of_min], shortest.dead = frontier[frontier_len], true
  frontier_len -= 1
  -- last node on the currently
  -- shortest path
  local p = shortest.last

  if node_to_id(p) == goal_id then
   -- we're done.  generate the
   -- path to the goal by
   -- retracing steps. reuse
   -- 'p' as the path
   p = {goal}

   while shortest.prev do
    shortest = best_table[node_to_id(shortest.prev)]
    add(p, shortest.last)
   end
   -- we've found the shortest path
   npc._t=0
   npc.ni=1
   npc.cn=p[#p]
   npc.tn=p[#p-1]
   return p
  end
  -- consider each neighbor n of
  -- p which is still in the
  -- frontier queue
  for n in all(map_neighbors(p)) do
   -- find the current-best
   -- known way to n (or
   -- create it, if there isn't
   -- one)
   local id = node_to_id(n)
   local old_best, new_cost_from_start =
    best_table[id],
    shortest.cost_from_start+world[n.x][n.y].i

   if not old_best then
    -- create an expensive
    -- dummy path step whose
    -- cost_from_start will
    -- immediately be
    -- overwritten
    old_best = {
     last = n,
     cost_from_start = max_number,
     cost_to_goal = mnhttn_dst(n, goal)
    }

    -- insert into queue
    frontier_len += 1
    frontier[frontier_len], best_table[id] = old_best, old_best
   end -- if old_best was nil

   -- have we discovered a new
   -- best way to n?
   if not old_best.dead and old_best.cost_from_start > new_cost_from_start then
    -- update the step at this
    -- node
    old_best.cost_from_start=new_cost_from_start
     old_best.prev=p
   end -- if
  end -- for each neighbor

 end -- while frontier not empty
	-- unreachable, so implicitly
 -- return nil
end

start={x=8,y=24}
goal={x=8,y=24}
function getpath()
 npc.path=find_path(start, goal,
         flag_cost,
         nil)
end

function node_to_id(n)
--8
 return shl(n.y, 8) + n.x
end

function map_neighbors(node)
 local neighbors = {}
 local _x=mid(node.x,1,#world)
 local _y=mid(node.y,2,#world[_x])

	if world[_x][_y-1].i!=nil then
 	add(neighbors,{x=_x,y=_y-1})
 end
 if world[_x][_y+1].i!=nil then
 	add(neighbors,{x=_x,y=_y+1})
 end
 if _y%2==0 then
 	if _x-1>0 then
	 if world[_x-1][_y-1].i!=nil then
 	 add(neighbors,{x=_x-1,y=_y-1})
  end
  if world[_x-1][_y+1].i!=nil then
  	add(neighbors,{x=_x-1,y=_y+1})
 	end
 	end
 else
	 if world[_x+1][_y-1].i!=nil then
 	 add(neighbors,{x=_x+1,y=_y-1})
  end
  if world[_x+1][_y+1].i!=nil then
  	add(neighbors,{x=_x+1,y=_y+1})
 	end
 end
 return neighbors
end

function mnhttn_dst(a, b)
 return abs(a.x - b.x) + abs(a.y - b.y)
end

function drawpath(path)
	local p=path[1]
	for i=2,#path-npc.ni+1 do
		local n=path[i]
		local x1=8+p.x*16
		local x2=8+n.x*16
		local y1=2+p.y*4
		local y2=2+n.y*4
		if p.y%2==1 then
			x1+=8
		end
		if n.y%2==1 then
			x2+=8
		end

		if i==#path-npc.ni+1 then
			line(x1,y1+1,x2,y2,9)
		else
			line(x1,y1,x2,y2,10)
			line(x1,y1+1,x2,y2+1,4)
		end

		p=n
	end
end

npc={
x=88,y=97,_t=0,ni=1,
path={},
cn={x=start.x,y=start.y},--current node
tn={x=goal.x,y=goal.y},--target node

	update=function(n)
		if n.tn!=nil and n.path!=nil then
 		--move towards next node
 		local x1=n.cn.x*16
 		local x2=n.tn.x*16
 		if (n.cn.y%2==1) x1+=8
 		if (n.tn.y%2==1) x2+=8

 		n.x=x1+(n._t)*(x2-x1)
			n.y=n.cn.y+(n._t)*(n.tn.y-n.cn.y)
			n._t+=0.1
			if n._t>1 then
				n.cn=n.tn
				n.ni+=1
				n.tn=n.path[#n.path-n.ni]
				n._t-=1
			end
		else
		end
	end,

	draw=function(n)
		sspr(24,0,1,3,n.x+8,1+n.y*4)
	end
}

function tl(p,x,y)
	if p.tx+x<1
		or p.ty+y<1
		or p.tx+x>#world
		or p.ty+y>#world[p.tx+x] then
		return 0
	elseif world[p.tx+x][p.ty+y]!=0 then
			return world[p.tx+x][p.ty+y]
	else
		return 0
	end
end

function getpxlposx(tx,ty)
	local x=tx*16
	if (ty%2==0) x+=8
	return x+24
end

chics={
{x=256,y=128,flipx=false,
draw=function(c)
	c.flipx=cos(t()*.1)<0
	sspr(26,0,2,2,c.x+sin(t()*.1)*8,c.y+cos(t()*.1)*4,2,2,c.flipx)
end},
{x=260,y=116,flipx=false,
draw=function(c)
	c.flipx=cos(t()*.1)>0
	sspr(26,0,2,2,c.x-sin(t()*.1)*8,c.y+cos(t()*.1)*4,2,2,c.flipx)
end},
{x=230,y=130,flipx=false,
draw=function(c)
	c.flipx=cos(t()*.1)<0
	sspr(26,0,2,2,c.x+sin(t()*.1)*8,c.y+cos(t()*.1)*4,2,2,c.flipx)
end},
}
function chicken()
	for c in all(chics) do
		c.draw(c)
	end
end
__gfx__
000000000000009990000000f0900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaa000
0000000000009999999000008077044400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000abbb300
007007000099999999999000100000440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000abbbb300
000770009999999999999990000000000000000000000110000000000000001100000000000000000000000000000000000000000000000000aa0000abbbb310
0007700000999999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000abb30003bbb3311
007007000000999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000ab300000abb300003333111
00000000000000999000000000000000000000000000000000000000000000000000000000000000000000000000000000900000003311000033311000941100
00000000000000000000000000000000000000116400000000000000064000000000000000000000000000000000000000421000004210000092110000420000
00000000000000ccc000000000000000000000c6c40f40000000000c6c40f4000000000000000000000000000000000000000000000000000000000000770000
000000000000ccccccc00000000000000000ccc6c4f0400000000ccc6c4f04000000000000000000000000000000000000000000000000000000000007ee7000
0000000000ccccc77cccc0000000000000c46c6211f24000000c46c6222f2400000000000000000000000000000000000000000000000000000000007eeee200
00000000cccccccc77ccccc000000000c644c64f2f2cccc00ccc4c64f2f2cccc000000000000000000000000000000000000000000000000007700007eeee210
0000000000ccccccccccc0000000000c6c44f442fcccc000000c42242fcccc0000000000000000000000000000000000000000000070000007ee20007eee2211
000000000000ccccccc0000000000ccc6c4f244cccc0000000000224cccc0000000000000000000000000000000000000000000007e2000007ee200002222111
00000000000000ccc0000000000c46c6222f24ccc00000000000000ccc0000000000000000000000000000000000000000900000002211000022211000941100
0000000000000000000000000ccc4c64f2f2cccc0000000000000000061000000000000000000000000000000000000000421000009410000094110000420000
000000000000003330000000000c42242fcccc00000000000000000c6c10f5000000000000000000000000000000000000000000000000000000000000aaa000
00000000000033333330000000000224cccc00000000000000000ccc6c1f0500000000000000000000000000000000000000000000000000000000000a999400
0000000000333333333330000000000ccc00000000000000000c16c6444f450000000000000000000000000000000000000000000000000000000000a9999400
0000000033333333333333300000000000000000000000000ccc1c65f4f4cccc00000000000000000000000000000000000000000000000000aa0000a9999410
000000000033333333333000000000000000000000000000000c14454fcccc00000000000000000000000000000000000000000000a000000a99400049994411
00000000000033333330000000000000000000000000000000000445cccc000000000000000000000000000000000000000000000a9400000a99400004444111
0000000000000033300000000000000000000000000000000000000ccc0000000000000000000000000000000000000000900000004411000044411000941100
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421000009210000092110000420000
0000000000000044400000000000009990000000000000aaa0000000000000777000000000000000000000000000000000000000000000000000000000aaa000
00000000000044444440000000009999999000000000aaaaaaa0000000007777777000000000000000000000000000000000000000000000000000000abb8300
000000000044444444444000009999999999900000aaaaaaaaaaa0000077777777777000000000000000000000000000000000000000000000000000ab8bb300
0000000044444444444444409999999999999990aaaaaaaaaaaaaaa07777777777777770000000000000000000000000000000000000000000aa0000abbbb310
000000000044444444444000009999999999900000aaaaaaaaaaa00000777777777770000000000000000000000000000000000000a000000ab8300038bb2311
00000000000044444440000000009999999000000000aaaaaaa000000000777777700000000000000000000000000000000000000ab300000abb300003333111
0000000000000044400000000000009990000000000000aaa0000000000000777000000000000000000000000000000000900000003311000033311000941100
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421000004210000092110000420000
00000000000000aa3330000000000000cccccccccccccccc00000000cccccccc0000000000000000cccc00000000000000000000000000000000000000000000
0000000000003abb3330000000000000cccccccccccccccc00000000cccccccc0000000000000000cccccc000000000000000000000000000000000000000000
0000000000333abb3113300000000000cccccccccccccccc00000000cccccccc0000000000000000cccccccc0000000000000000000000000000000000000000
00000000333333333111333000000000cccccccccccccccc00000000cccccccc0000000000000000cccccccccc00000000000000000000000000000000000000
00000000003333921133300000000000cccccccccccccccc00000000cccccccc0000000000000000cccccccccccc000000000000000000000000000000000000
00000000000033333330000000000000cccccccccccccccc00000000cccccccc0000000000000000cccccccccccccc0000000000000000000000000000000064
00000000000000333000000000000000cccccccccccccccc00000000cccccccc0000000000000000cccccccccccccccc0000000000000000000000000000c6c4
0000000000000000000000000000000011cccccccccccccc00000000ccccccddcc000000000000cccccccccccccccccc00000000000000000000000000ccc6c4
000000000000008880000000000000001111ccccccccccccccccccccccccdddd000000000000cccc0000000007700000000000000000000000000000c46c6222
00000000000088888880000000000000111111ccccccccccccccccccccdddddd0000000000cccccc00000000000770000000000000000000000000ccc4c64f2f
0000000000888888888880000000000011111111ccccccccccccccccdddddddd00000000cccccccc0000000077700000000000000000000000000000c42242fc
000000008888888888888880000000000011111111ccccccccccccdddddddd11000000cccccccccccc0000000077000000000000000000000000000000224ccc
00000000008888888888800000000000220011111111ccccccccdddddddd11420000cccccccccccccccc0000770000000000000000000000000000000000ccc0
0000000000008888888000000000000052220011111111ccccdddddddd11424400cccccccccccccccccccc000007700000000000000000000000000000000000
000000000000008880000000000000002222220011111111dddddddd11424442cccccccccccccccccccccccc7770000000000000000000000000000000000000
000000000000000000000000000000001225222200111111dddddd1142444244ccccccccccccccccccccccdd0077000000000000000000000000000000000000
000000000000000000000000000000002222252222001111dddd1142444444440000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000002222122252220011dd114244444444440000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000122221222222220011424444442444450000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000022122222222522224244444424444544000000cc00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000222212222122222244442444444544440000cccc00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000001122221222212522442444444544445500cccccc00000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000022112222122222224444444544445544cccccccc00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000001122122222122221444445444445445511cccccc00000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000011112211222212224445444455445555dddddddd33333333000000000000000000000000000000000000000000000000
00000000000000000000000000000000dd1111222122221245444454445555dddddddddd33333333000000000000000000000000000000000000000000000000
00000000000000000000000000000000dddd111122112222444455445555dddddddddddd33333333000000000000000000000000000000000000000000000000
00000000000000000000000000000000dddddd11112212224445445555dddddddddddddd33333333000000000000000000000000000000000000000000000000
00000000000000000000000000000000dddddddd1111221155445555dddddddddddddddd33333333000000000000000000000000000000000000000000000000
00000000000000000000000000000000dddddddddd111122445555dddddddddddddddddd33333333000000000000000000000000000000000000000000000000
00000000000000000000000000000000dddddddddddd11115555dddddddddddddddddddd33333333000000000000000000000000000000000000000000000000
00000000000000000000000000000000dddddddddddddd1155dddddddddddddddddddddd33333333000000000000000000000000000000000000000000000000
0000000000000000000000003333333333333333333333333333dd33333333333333222333333333333322233333333333333333000000000000000000000000
000000000000000000000000333333d6333333d633333333333d55d6333333333332555223333333333222222333333323333333000000000000000000000000
0000000000000000000000003333dd5d3333dd5d6633333333d5555d666333333325555d22433333332222222243333322433333000000000000000000000000
00000000000000000000000033dd555d33dd555ddd66333333d5555dd6f633333255555dd2f433333222222222f4333322f43333000000000000000000000000
0000000000000000000000003d5555443d555544dddd63333d5555446fff6333225555442fff4333222222222fff43332fff4333000000000000000000000000
0000000000000000000000003edd44443edd44444466f3333edd444dfffff3333e2244442ffff4333e222222fffff433fffff433000000000000000000000000
0000000000000000000000003eeedd443eeedd4466fff3333eeedd4dfffff3333eee2242fffff3333eee2222fffff333fffff333000000000000000000000000
00000000000000000000000031eeeed631eeeed6ff0fd33331eeeedfff0fd33331eeee2fff0fd33331eeee2fff0fd333ff0fd333000000000000000000000000
0000000000000000000000003311eeef3311eeeff00d33333311eeeff00d33333311eeeff00d33333311eeeff00d3333f00d3333000000000000000000000000
000000000000000000000000333311ef333311efd0333333333311efd0333333333311efd0333333333311efd0333333d0333333000000000000000000000000
0000000000000000000000003333331d3333331d333333333333331d333333333333331d333333333333331d3333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333355533333333333335493333333333333944933333333333333333000000000000000000000000
0000000000000000000000003333335d3333335d333333333351115d333333333354114493333333339444449333333393333333000000000000000000000000
0000000000000000000000003333551533335515dd33333335111114ddd333333541141444933333394444444493333344933333000000000000000000000000
000000000000000000000000335511153355111555dd3333351111144d4d3333354141144d4d3333394444449949333399493333000000000000000000000000
00000000000000000000000034111122341111225555d33354111122d444d33354114142d444d333944444499444933394449333000000000000000000000000
000000000000000000000000315422223154222222dd43333154222544444d333154224544444d33314444494444493344444933000000000000000000000000
0000000000000000000000003111542231115422dd44433331115425444443333111542544444333311144994444433344444333000000000000000000000000
0000000000000000000000003141115d3141115d4404433331411154440443333141115444044333314111944404433344044333000000000000000000000000
00000000000000000000000033114114331141144004333333114114400433333311411440043333331141144004333340043333000000000000000000000000
00000000000000000000000033331144333311444033333333331144403333333333114440333333333311444033333340333333000000000000000000000000
00000000000000000000000033333314333333143333333333333314333333333333331433333333333333143333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
00000000000000000000000033333333333333333333333333333333333333333333333333333333333333333333333333333333000000000000000000000000
77777077077777077777000000bbbbb0bbbbb0bbbbb0bb000bb00000000000000000000000000000000000000000000000000000000000000000000000000000
77177077077111077177000000bb1110bb1bb0bb1bb0bbb0bbb00000000000000000000000000000000000000000000000000000000000000000000000000000
77777077077000077077077770bbbb00bbbbb0bbbb10bbbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000
77111077077000077077011110bb1100bb0bb0bb1bb0bb1b1bb00000000000000000000000000000000000000000000000000000000000000000000000000000
77000077077777077777000000bb0000bb0bb0bb0bb0bb010bb00000000000000000000000000000000000000000000000000000000000000000000000000000
11000011011111011111000000110000110110110110110001100000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000049480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000004958594a4b48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000495859454545454a4b4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000049585945454545454545454a4b480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000004958594545454545454545454545454a4b48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000495859454545454545454545454545454545454a4b4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000049585945454545454545454545454545454545454545454a4b480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000004958594545454545454545454545454545454545454545454545454a4b48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000495859454545454545454545454545454545454545454545454545454545454a4b483b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000049585945454545454545454545454545454545454545454545454545454545454545454a4b483b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000004958594545454545454545454545454545454545454545454545454545454545454545454545454a4b483b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000495859454545454545454545454545454545454545454545454545454545454545454545454545454545454a4b483b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0049585945454545454545454545454545454545454545454545454545454545454545454545454545454545454545454a4b480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
68594545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454a5a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5455444545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454547565700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6465545544454545454545454545454545454545454545454545454545454545454545454545454545454545454545475657666700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7475646554554445454545454545454545454545454545454545454545454545454545454545454545454545454756576667767700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878747564655455444545454545454545454545454545454545454545454545454545454545454545454547565766677677787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787874756465545544454545454545454545454545454545454545454545454545454545454545475657666776777878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787475646554554445454545454545454545454545454545454545454545454545454756576667767778787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878747564655455444545454545454545454545454545454545454545454547565766677677787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787874756465545544454545454545454545454545454545454545475657666776777878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787878787475646554554445454545454545454545454545454756576667767778787878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787878787878747564655455444545454545454545454547565766677677787878787878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787878787878787874756465545544454545454545475657666776777878787878787878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787878787878787878787475646554554445454756576667767778787878787878787878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787878787878787878787878747564655455565766677677787878787878787878787878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787878787878787878787878787874756465666776777878787878787878787878787878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7878787878787878787878787878787878787878787878787475767778787878787878787878787878787878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
